#!groovy
node {
    def rootPath = "/root/go/src/github.com/rancher/tests/"
    def workPath = "/root/go/src/github.com/rancher/tests/validation/"
    def qaInfraWorkPath = "/root/go/src/github.com/rancher/qa-infra-automation"
    def jobName = "${JOB_NAME}"
    if (jobName.contains('/')) { 
      jobNames = jobName.split('/')
      jobName = jobNames[jobNames.size() - 1] 
    }
    def golangTestContainer = "${jobName}${env.BUILD_NUMBER}-golangtest"
    def buildTestContainer = "${jobName}${env.BUILD_NUMBER}-buildtest"
    def configGeneratorContainer = "${jobName}${env.BUILD_NUMBER}_generator"
    def cleanupTestContainer = "${jobName}${env.BUILD_NUMBER}-cleanuptest"
    def imageName = "rancher-recurring-runs-validation-${jobName}${env.BUILD_NUMBER}"
    def validationVolume = "RecurringRunsSharedVolume-${jobName}${env.BUILD_NUMBER}"
    def testsDir = "/root/go/src/github.com/rancher/tests/validation/"
    def configsDir = "cattle-configs"
    def patchedConfigsDir = "patched-cattle-configs"
    def testResultsOut = "results.xml"
    def qaseRun = "testrun"
    def testRunConfig = "testrunconfig.yaml"
    def envFile = ".env"
    def rancherConfig = "rancher_env.config"
    def branch = "main"
    def qaInfraBranch = "main"
    def qaInfraRepo = "https://github.com/rancher/qa-infra-automation"
    def config = env.CONFIG
    def ansibleConfig = env.ANSIBLE_CONFIG
    def terraformConfig = env.TERRAFORM_CONFIG 
    def downstreamClusterTerraformConfig = env.DOWNSTREAM_CLUSTERTERRAFORM_CONFIG 
    def rancherToken = ""
    def filename = "config.yaml"
    def ansibleVarsFilename = "vars.yaml"
    def terraformVarsfilename = "cluster.tfvars"
    def downstreamTerraformVarsfilename = "downstream-cluster.tfvars"
    // def individualJob = (jobName =~ /(go-recurring-[a-z]+)/)[0][1]
    def individualJob = "go-recurring-daily"
    individualJob = "${individualJob}-individual-job"
    if ("${env.INDIVIDUAL_JOB}" != "null" && "${env.INDIVIDUAL_JOB}" != "") {
      individualJob = "${env.INDIVIDUAL_JOB}"
    }

    if ("${env.BRANCH}" != "null" && "${env.BRANCH}" != "") {
      branch = "${env.BRANCH}"
    }

    if ("${env.REPO}" != "null" && "${env.REPO}" != "") {
      rancherRepo = "${env.REPO}"
    }

    if ("${env.QA_INFRA_REPO_BRANCH}" != "null" && "${env.QA_INFRA_REPO_BRANCH}" != "") {
      qaInfraBranch = "${env.QA_INFRA_REPO_BRANCH}"
    }

    if ("${env.QA_INFRA_REPO_URL}" != "null" && "${env.QA_INFRA_REPO_URL}" != "") {
      qaInfraRepo = "${env.QA_INFRA_REPO_URL}"
    }
  
    def timeout = "60m"
    if ("${env.TIMEOUT}" != "null" && "${env.TIMEOUT}" != "") {
      timeout = "${env.TIMEOUT}" 
    }

    def configFiles = []
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
      withFolderProperties {
        paramsMap = []
        params.each {
          if (it.value && it.value.trim() != "") {
              paramsMap << "$it.key=$it.value"
          }
        }
        withCredentials([ string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                          string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'RANCHER_EKS_ACCESS_KEY'),
                          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'RANCHER_EKS_SECRET_KEY'),
                          string(credentialsId: 'AWS_SSH_PEM_KEY', variable: 'AWS_SSH_PEM_KEY'),
                          string(credentialsId: 'RANCHER_SSH_KEY', variable: 'RANCHER_SSH_KEY'),
                          string(credentialsId: 'RANCHER_REGISTRY_USER_NAME', variable: 'RANCHER_REGISTRY_USER_NAME'),
                          string(credentialsId: 'RANCHER_REGISTRY_PASSWORD', variable: 'RANCHER_REGISTRY_PASSWORD'),
                          string(credentialsId: 'ADMIN_PASSWORD', variable: 'ADMIN_PASSWORD'),
                          string(credentialsId: 'USER_PASSWORD', variable: 'USER_PASSWORD'),
                          string(credentialsId: 'RANCHER_VALID_TLS_CERT', variable: 'RANCHER_VALID_TLS_CERT'),
                          string(credentialsId: 'RANCHER_VALID_TLS_KEY', variable: 'RANCHER_VALID_TLS_KEY'),
                          string(credentialsId: 'RANCHER_BYO_TLS_CERT', variable: 'RANCHER_BYO_TLS_CERT'),
                          string(credentialsId: 'RANCHER_BYO_TLS_KEY', variable: 'RANCHER_BYO_TLS_KEY'),
                          string(credentialsId: 'SLACK_WEBHOOK', variable: 'SLACK_WEBHOOK'),
                          string(credentialsId: 'QASE_AUTOMATION_TOKEN', variable: 'QASE_AUTOMATION_TOKEN')]) {
          
        withEnv(paramsMap) {
          stage('Checkout') {
            deleteDir()
            dir("./tests") {
              echo "cloning rancher tests"
              checkout([
                      $class: 'GitSCM',
                      branches: [[name: "*/${branch}"]],
                      extensions: scm.extensions + [[$class: 'CleanCheckout']],
                      userRemoteConfigs: [[url: rancherRepo]]
                    ])
            }
            dir('./qa-infra-automation') {
              echo "cloning qa-infra-automation repo"
              checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${qaInfraBranch}"]],
                    extensions: scm.extensions + [[$class: 'CleanCheckout']],
                    userRemoteConfigs: [[url: qaInfraRepo]]
                  ])
            }
          }
          dir ("./") {
            stage('Configure and Build') {
              config = config.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
              config = config.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
              config = config.replace('${AWS_IAM_PROFILE}', env.AWS_IAM_PROFILE)
              config = config.replace('${AWS_REGION}', env.AWS_REGION)
              config = config.replace('${AWS_VPC}', env.AWS_VPC)
              config = config.replace('${AWS_SECURITY_GROUPS}', env.AWS_SECURITY_GROUPS)
              config = config.replace('${ADMIN_PASSWORD}', env.ADMIN_PASSWORD)
              terraformConfig = terraformConfig.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
              terraformConfig = terraformConfig.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
              terraformConfig = terraformConfig.replace('${AWS_REGION}', env.AWS_REGION)
              terraformConfig = terraformConfig.replace('${AWS_VPC}', env.AWS_VPC)
              terraformConfig = terraformConfig.replace('${AWS_SECURITY_GROUPS}', env.AWS_SECURITY_GROUPS)
              ansibleConfig = ansibleConfig.replace('${ADMIN_PASSWORD}', env.ADMIN_PASSWORD)
              downstreamClusterTerraformConfig = downstreamClusterTerraformConfig.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
              downstreamClusterTerraformConfig = downstreamClusterTerraformConfig.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
              downstreamClusterTerraformConfig = downstreamClusterTerraformConfig.replace('${AWS_REGION}', env.AWS_REGION)
              downstreamClusterTerraformConfig = downstreamClusterTerraformConfig.replace('${AWS_VPC}', env.AWS_VPC)
              downstreamClusterTerraformConfig = downstreamClusterTerraformConfig.replace('${AWS_SECURITY_GROUPS}', env.AWS_SECURITY_GROUPS)


              if (env.AWS_SSH_PEM_KEY && env.AWS_SSH_KEY_NAME) {
                dir("./tests/.ssh") {
                  def decoded = new String(AWS_SSH_PEM_KEY.decodeBase64())
                  writeFile file: AWS_SSH_KEY_NAME, text: decoded
                }
              }
              dir("./tests/validation") {
                writeFile file: filename, text: config
                env.CATTLE_TEST_CONFIG = "${workPath}${filename}"
              }
              dir("./qa-infra-automation") {
                dir ("./ansible") {
                  writeFile file: ansibleVarsFilename, text: ansibleConfig
                }
                dir ("./tofu/aws/modules/cluster_nodes") {
                  writeFile file: terraformVarsfilename, text: terraformConfig
                }
                dir ("./tofu/rancher/cluster") {
                  writeFile file: downstreamTerraformVarsfilename, text: downstreamClusterTerraformConfig
                }
              }
              
              dir ("./") {
                sh "./tests/validation/configure.sh"
                sh "docker build . -f ./tests/validation/Dockerfile.e2e -t ${imageName}"
                sh "docker volume create --name ${validationVolume}"
              }
            }
            stage('Setup') {
                sh returnStdout: true, script: 'wget -qO ./yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64'
                sh returnStdout:true, script: 'chmod a+x ./yq'
            }
            stage("Build Environment") {
              try {
                sh "docker run -v ${validationVolume}:/root --name ${buildTestContainer} -t --env-file ${envFile} " +
                "${imageName} sh -c \"${workPath}pipeline/scripts/setup_environment.sh && ${workPath}pipeline/scripts/build_qase_auto_testrun.sh\""
              } catch(err) {
                  sh "docker stop ${buildTestContainer}"
                  sh "docker rm -v ${buildTestContainer}"
                  sh "docker volume rm -f ${validationVolume}"
                  error "Build Environment had failures."
              }
            }
            try {
              stage('Run Test Validations') {
                  try {
                    jobs = [:]
                    
                    // copy updated config file from the build test container
                    sh "docker cp ${buildTestContainer}:${workPath}${filename} ./"
                    sh "docker cp ${buildTestContainer}:${workPath}${qaseRun} ./"
                    sh "./${qaseRun} --startRun=true"

                    def testRunID = sh (  
                      script: "./yq '.id'  ./${testRunConfig}",
                      returnStdout: true
                    ).trim()

                    def mainRancherConfigPath = "./${filename}"

                    sh "./yq e '.rancher.cleanup = true' -i ${mainRancherConfigPath}"
                    
                    def desiredflags = 'InstallRancher|Short'

                    sh "./yq e '.flags.desiredflags = \"${desiredflags}\"' -i ${mainRancherConfigPath}"

                    def configYaml = readFile(file: "${mainRancherConfigPath}")

                    def goProvisioningParams = [
                      string(name: 'TIMEOUT', value: timeout),
                      text(name: 'CONFIG', value: configYaml),
                      string(name: 'REPO', value: "${rancherRepo}"),
                      string(name: 'BRANCH', value: "${branch}"),
                      string(name: 'QASE_TEST_RUN_ID', value: "${testRunID}"),
                      string(name: 'TEST_PACKAGE', value: "${env.TEST_PACKAGE}"),
                      string(name: 'GOTEST_TESTCASE', value: "${env.GOTEST_TESTCASE_PROVISIONING}"),
                      string(name: 'TAGS', value: "${env.PROVISIONING_TAGS}"),
                    ]

                    def goValidationParams = [
                      string(name: 'TIMEOUT', value: timeout),
                      text(name: 'CONFIG', value: configYaml),
                      string(name: 'REPO', value: "${rancherRepo}"),
                      string(name: 'BRANCH', value: "${branch}"),
                      string(name: 'QASE_TEST_RUN_ID', value: "${testRunID}"),
                      string(name: 'TEST_PACKAGE', value: "${env.TEST_PACKAGE}"),
                      string(name: 'GOTEST_TESTCASE', value: "${env.GOTEST_TESTCASE_VALIDATION} -p 1"),
                      string(name: 'TAGS', value: "${env.VALIDATION_TEST_TAGS}"),
                    ]

                    if ("${env.PROVISIONING_TAGS}" != "null" && "${env.PROVISIONING_TAGS}" != "") {
                      jobs["test-provisioning"] = { build job: individualJob, parameters: goProvisioningParams }
                    }
                    if ("${env.VALIDATION_TEST_TAGS}" != "null" && "${env.VALIDATION_TEST_TAGS}" != "") {
                      jobs["test-validation"] = { build job: individualJob, parameters: goValidationParams }
                    }
                    parallel jobs
                  } catch(err) {
                    echo "Test validations had failures: " + err
                  }
                sh "./${qaseRun} --startRun=false"
              }
            } catch(err) {
              echo "Failures " + err
            }
            
            stage('Cleanup Rancher Environment') {
              if ("${env.CLEANUP_RANCHER}" == "True" || "${env.CLEANUP_RANCHER}" == "true") {
                try {
                    sh "docker run --volumes-from ${buildTestContainer} --name ${cleanupTestContainer} -t --env-file ${envFile} " +
                    "${imageName} sh -c \"${workPath}pipeline/scripts/rancher_cleanup.sh\""
                } catch(err) {
                  sh "docker stop ${buildTestContainer}"
                  sh "docker rm -v ${buildTestContainer}"
                  sh "docker stop ${cleanupTestContainer}"
                  sh "docker rm -v ${cleanupTestContainer}"
                  sh "docker rmi -f ${imageName}"
                  sh "docker volume rm -f ${validationVolume}"
                  error "Cleanup had failures."
                }
              }
            }
            stage('Clean Up Images and Volume') {
              echo 'Cleaning test images and volume.'
              sh "docker stop ${buildTestContainer}"
              sh "docker rm -v ${buildTestContainer}"
              if ("${env.CLEANUP_RANCHER}" == "True" || "${env.CLEANUP_RANCHER}" == "true") {
                sh "docker stop ${cleanupTestContainer}"
                sh "docker rm -v ${cleanupTestContainer}"
              }
              sh "docker rmi -f ${imageName}"
              sh "docker volume rm -f ${validationVolume}"
            }
          } // dir 
        } // withEnv
      } // creds
    } // folder properties
  } // wrap 
} // node
