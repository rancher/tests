#!groovy
node {
    def workPath = "/root/go/src/github.com/rancher/tests/validation/"
    def rancherRepo = "https://github.com/rancher/tests"
    def jobName = "${JOB_NAME}"
    if (jobName.contains('/')) { 
      jobNames = jobName.split('/')
      jobName = jobNames[jobNames.size() - 1] 
    }
    def buildTestContainer = "${jobName}${env.BUILD_NUMBER}-buildtest"
    def cleanupTestContainer = "${jobName}${env.BUILD_NUMBER}-cleanuptest"
    def imageName = "rancher-recurring-runs-validation-${jobName}${env.BUILD_NUMBER}"
    def validationVolume = "RecurringRunsSharedVolume-${jobName}${env.BUILD_NUMBER}"
    def envFile = ".env"
    def branch = "main"
    def qaInfraBranch = "main"
    def qaInfraRepo = "https://github.com/rancher/qa-infra-automation"
    def config = env.CONFIG
    def ansibleConfig = env.ANSIBLE_CONFIG
    def terraformConfig = env.TERRAFORM_CONFIG
    def filename = "config.yaml"
    def ansibleVarsFilename = "vars.yaml"
    def terraformVarsfilename = "cluster.tfvars"
    def elementalTerraformVarsfilename = "elemental.tfvars"
    def elementalTerraformConfig = env.ELEMENTAL_TERRAFORM_CONFIG
    def googleCredentialsFilename = "service_account.json"
    def elementalAnsibleConfig = env.ELEMENTAL_ANSIBLE_CONFIG
    def elementalConfig = env.ELEMENTAL_CONFIG
    def elementalConfigFile = "elementalconfig.yaml"

    if ("${env.BRANCH}" != "null" && "${env.BRANCH}" != "") {
      branch = "${env.BRANCH}"
    }

    if ("${env.REPO}" != "null" && "${env.REPO}" != "") {
      rancherRepo = "${env.REPO}"
    }
  
    if ("${env.QA_INFRA_REPO_BRANCH}" != "null" && "${env.QA_INFRA_REPO_BRANCH}" != "") {
      qaInfraBranch = "${env.QA_INFRA_REPO_BRANCH}"
    }

    if ("${env.QA_INFRA_REPO_URL}" != "null" && "${env.QA_INFRA_REPO_URL}" != "") {
      qaInfraRepo = "${env.QA_INFRA_REPO_URL}"
    }

    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
      withFolderProperties {
        paramsMap = []
        params.each {
          if (it.value && it.value.trim() != "") {
              paramsMap << "$it.key=$it.value"
          }
        }
        withCredentials([ string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                          string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'RANCHER_EKS_ACCESS_KEY'),
                          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'RANCHER_EKS_SECRET_KEY'),
                          string(credentialsId: 'AWS_SSH_PEM_KEY', variable: 'AWS_SSH_PEM_KEY'),
                          string(credentialsId: 'RANCHER_SSH_KEY', variable: 'RANCHER_SSH_KEY'),
                          string(credentialsId: 'RANCHER_REGISTRY_USER_NAME', variable: 'RANCHER_REGISTRY_USER_NAME'),
                          string(credentialsId: 'RANCHER_REGISTRY_PASSWORD', variable: 'RANCHER_REGISTRY_PASSWORD'),
                          string(credentialsId: 'ADMIN_PASSWORD', variable: 'ADMIN_PASSWORD'),
                          string(credentialsId: 'USER_PASSWORD', variable: 'USER_PASSWORD'),
                          string(credentialsId: 'RANCHER_VALID_TLS_CERT', variable: 'RANCHER_VALID_TLS_CERT'),
                          string(credentialsId: 'RANCHER_VALID_TLS_KEY', variable: 'RANCHER_VALID_TLS_KEY'),
                          string(credentialsId: 'RANCHER_BYO_TLS_CERT', variable: 'RANCHER_BYO_TLS_CERT'),
                          string(credentialsId: 'RANCHER_BYO_TLS_KEY', variable: 'RANCHER_BYO_TLS_KEY'),
                          string(credentialsId: 'SLACK_WEBHOOK', variable: 'SLACK_WEBHOOK'),
                          string(credentialsId: 'QASE_AUTOMATION_TOKEN', variable: 'QASE_AUTOMATION_TOKEN'),
                          string(credentialsId: 'GOOGLE_CLOUD_PROJECT', variable: 'GOOGLE_CLOUD_PROJECT'),
                          string(credentialsId: 'RANCHER_GKE_CREDENTIAL', variable: 'RANCHER_GKE_CREDENTIAL')]) {
          
        withEnv(paramsMap) {
          stage('Checkout') {
            deleteDir()
            dir("./tests") {
              echo "cloning rancher tests"
              checkout([
                      $class: 'GitSCM',
                      branches: [[name: "*/${branch}"]],
                      extensions: scm.extensions + [[$class: 'CleanCheckout']],
                      userRemoteConfigs: [[url: rancherRepo]]
                    ])
            }
            dir('./qa-infra-automation') {
              echo "cloning qa-infra-automation repo"
              checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${qaInfraBranch}"]],
                    extensions: scm.extensions + [[$class: 'CleanCheckout']],
                    userRemoteConfigs: [[url: qaInfraRepo]]
                  ])
            }
          }
          dir ("./") {
            stage('Configure and Build') {
              terraformConfig = terraformConfig.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
              terraformConfig = terraformConfig.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
              terraformConfig = terraformConfig.replace('${AWS_REGION}', env.AWS_REGION)
              terraformConfig = terraformConfig.replace('${AWS_VPC}', env.AWS_VPC)
              terraformConfig = terraformConfig.replace('${AWS_SECURITY_GROUPS}', env.AWS_SECURITY_GROUPS)
              ansibleConfig = ansibleConfig.replace('${ADMIN_PASSWORD}', env.ADMIN_PASSWORD)
              elementalTerraformConfig = elementalTerraformConfig.replace('${GOOGLE_CLOUD_PROJECT}', env.GOOGLE_CLOUD_PROJECT)
              elementalTerraformConfig = elementalTerraformConfig.replace('${RANCHER_GKE_CREDENTIAL}', googleCredentialsFilename)


              if (env.AWS_SSH_PEM_KEY && env.AWS_SSH_KEY_NAME) {
                dir("./tests/.ssh") {
                  def decoded = new String(AWS_SSH_PEM_KEY.decodeBase64())
                  writeFile file: AWS_SSH_KEY_NAME, text: decoded
                }
              }

              dir("./tests/validation") {
                writeFile file: filename, text: ""
              }

              dir("./qa-infra-automation") {
                dir ("./ansible") {
                  writeFile file: ansibleVarsFilename, text: ansibleConfig
                }
                dir ("./ansible/rancher/downstream/elemental") {
                  writeFile file: ansibleVarsFilename, text: elementalAnsibleConfig
                  writeFile file: elementalConfigFile, text: elementalConfig
                }
                dir ("./tofu/aws/modules/cluster_nodes") {
                  writeFile file: terraformVarsfilename, text: terraformConfig
                }
                dir ("./tofu/gcp/modules/elemental_nodes") {
                  def decoded = new String(env.RANCHER_GKE_CREDENTIAL.decodeBase64())
                  writeFile file: googleCredentialsFilename, text: decoded
                  writeFile file: elementalTerraformVarsfilename, text: elementalTerraformConfig
                }
              }
              
              dir ("./") {
                sh "./tests/validation/configure.sh"
                sh "docker build . -f ./tests/validation/Dockerfile.e2e -t ${imageName}"
                sh "docker volume create --name ${validationVolume}"
              }
            }
            stage('Setup') {
                sh returnStdout: true, script: 'wget -qO ./yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64'
                sh returnStdout:true, script: 'chmod a+x ./yq'
                def envText = readFile("${envFile}")
                writeFile file: "${envFile}", text: envText+"BUILD_DOWNSTREAM_CLUSTER=false"
            }
            stage("Build Environment") {
              try {
                sh "docker run -v ${validationVolume}:/root --name ${buildTestContainer} -t --env-file ${envFile} " +
                "${imageName} sh -c \"${workPath}pipeline/scripts/setup_environment.sh && chmod +x ${workPath}pipeline/scripts/build_elemental_qa_infra.sh && ${workPath}pipeline/scripts/build_elemental_qa_infra.sh\""
              } catch(err) {
                  sh "docker stop ${buildTestContainer}"
                  sh "docker rm -v ${buildTestContainer}"
                  sh "docker volume rm -f ${validationVolume}"
                  error "Build Environment had failures."
              }
            }
            
            stage('Cleanup Rancher Environment') {
              if ("${env.CLEANUP_RANCHER}" == "True" || "${env.CLEANUP_RANCHER}" == "true") {
                try {
                    sh "docker run --volumes-from ${buildTestContainer} --name ${cleanupTestContainer} -t --env-file ${envFile} " +
                    "${imageName} sh -c \"${workPath}pipeline/scripts/rancher_cleanup.sh && chmod +x ${workPath}pipeline/scripts/destroy_elemental_qa_infra.sh && ${workPath}pipeline/scripts/destroy_elemental_qa_infra.sh\""
                } catch(err) {
                  sh "docker stop ${buildTestContainer}"
                  sh "docker rm -v ${buildTestContainer}"
                  sh "docker stop ${cleanupTestContainer}"
                  sh "docker rm -v ${cleanupTestContainer}"
                  sh "docker rmi -f ${imageName}"
                  sh "docker volume rm -f ${validationVolume}"
                  error "Cleanup had failures."
                }
              }
            }
            stage('Clean Up Images and Volume') {
              echo 'Cleaning test images and volume.'
              sh "docker stop ${buildTestContainer}"
              sh "docker rm -v ${buildTestContainer}"
              if ("${env.CLEANUP_RANCHER}" == "True" || "${env.CLEANUP_RANCHER}" == "true") {
                sh "docker stop ${cleanupTestContainer}"
                sh "docker rm -v ${cleanupTestContainer}"
              }
              sh "docker rmi -f ${imageName}"
              sh "docker volume rm -f ${validationVolume}"
            }
          } // dir 
        } // withEnv
      } // creds
    } // folder properties
  } // wrap 
} // node
