---
name: Hostbusters QA Recurring Runs

on:
  schedule:
    - cron: "0 11 * * 1"
  workflow_dispatch:
    inputs:
      rancher_version:
        description: "Rancher tag version"
      rancher_chart_version:
        description: "Rancher chart version"
      rancher-version-2-12:
        description: "Rancher version for v2.12.x"
        default: "v2.12-head"
      rancher-chart-version-2-12:
        description: Rancher chart version for v2.12.x
        default: "v2.12-head"
      rancher-version-2-11:
        description: "Rancher version for v2.11.x"
        default: "v2.11-head"
      rancher-chart-version-2-11:
        description: Rancher chart version for v2.11.x
        default: "v2.11-head"
      rancher-version-2-10:
        description: "Rancher version for v2.10.x"
        default: "v2.10-head"
      rancher-chart-version-2-10:
        description: Rancher chart version for v2.10.x
        default: "v2.10-head"
      rancher-version-2-9:
        description: "Rancher version for v2.9.x"
        default: "v2.9-head"
      rancher-chart-version-2-9:
        description: Rancher chart version for v2.9.x
        default: "v2.9-head"
  workflow_call:
    inputs:
      rancher_version:
        description: "Rancher tag version provided from check-rancher-tag workflow"
        required: true
        type: string
      rancher_chart_version:
        description: "Rancher chart version provided from check-rancher-tag workflow"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  CLOUD_PROVIDER_VERSION: "5.95.0"
  HOSTNAME_PREFIX: "gha-recur"
  TIMEOUT: "5h"

jobs:
  v2-12:
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.rancher_version, 'v2.12.'))
    name: ${{ inputs.rancher_version || github.event.inputs.rancher-version-2-12 }}
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout tfp-automation repository
        uses: actions/checkout@v4
        with:
          repository: rancher/tfp-automation
          path: tfp-automation

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS credentials from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            AWS_ACCESS_KEY, ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY, ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Whitelist Runner IP
        uses: ./.github/actions/whitelist-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-version-2-12) || 
              (github.event_name == 'schedule' && vars.RANCHER_VERSION_2_12_HEAD) 
            }}

      - name: Set Rancher chart version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_CHART_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_chart_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-chart-version-2-12) || 
              (github.event_name == 'schedule' && vars.RANCHER_CHART_VERSION_2_12_HEAD) 
            }}

      - name: Set Rancher repo
        uses: ./.github/actions/set-rancher-repo
        with:
          rancher-version: ${{ env.RANCHER_VERSION }}
          fallback-repo: ${{ secrets.RANCHER_REPO }}

      - name: Get Qase ID
        id: get-qase-id
        uses: ./.github/actions/get-qase-id
        with:
          triggered_tag: ${{ github.event.inputs.rancher_version }}
          qase_release_id: ${{ vars.HB_QASE_RELEASE_TEST_RUN_ID_2_12 }}
          qase_rc_id: ${{ vars.HB_QASE_RC_TEST_RUN_ID_2_12 }}
          qase_recurring_id: ${{ vars.HB_QASE_DEFAULT_TEST_RUN_ID_2_12 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
            cleanup: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.TFP_SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            awsCredentials:
              awsAccessKey: "$AWS_ACCESS_KEY"
              awsSecretKey: "$AWS_SECRET_KEY"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              certType: "${{ vars.CERT_TYPE }}"
              chartVersion: "${{ env.RANCHER_CHART_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ env.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_12 }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            standaloneLogging: ${{ vars.TERRAFORM_LOGGING }}

          scalingInput:
            nodeProvider: "ec2"

          clusterConfig:
            cni: "${{ secrets.CNI }}"
            provider: "${{ vars.PROVIDER_AMAZON }}"
            nodeProvider: "ec2"

          awsCredentials:
            secretKey: "$AWS_SECRET_KEY"
            accessKey: "$AWS_ACCESS_KEY"
            defaultRegion: "${{ secrets.AWS_REGION }}"

          awsMachineConfigs:
            region: "${{ secrets.AWS_REGION }}"
            awsMachineConfig:
            - roles: ["etcd", "controlplane", "worker"]
              instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              sshUser: "${{ secrets.AWS_USER }}"
              vpcId: "${{ secrets.AWS_VPC_ID }}"
              volumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              zone: "${{ vars.AWS_ZONE_LETTER }}"
              retries: "5"
              rootSize: "${{ vars.AWS_ROOT_SIZE }}"
              securityGroup: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]

          awsEC2Configs:
            region: "${{ secrets.AWS_REGION }}"
            awsSecretAccessKey: "$AWS_SECRET_KEY"
            awsAccessKeyID: "$AWS_ACCESS_KEY"
            awsEC2Config:
              - instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.AWS_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs"
                awsIAMProfile: "${{ secrets.AWS_IAM_PROFILE}}"
                awsUser: "${{ secrets.AWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["etcd", "controlplane", "worker"]
              - instanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.WINDOWS_2022_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs-wins"
                awsUser: "${{ secrets.AWS_WINDOWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["windows"]
          sshPath: 
            sshPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/go-build.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Creating Rancher server
        run: go run /home/runner/work/tests/tests/validation/recurring/infrastructure/setuprancher/createRancherServer.go

      - name: Run Test Suites
        uses: ./.github/actions/run-hostbusters-test-suites

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          hb-qase-test-run-id: ${{ steps.get-qase-id.outputs.id }}
          qase-automation-token: ${{ secrets.QASE_AUTOMATION_TOKEN }}
          hb-qase-project-id: ${{ secrets.HB_QASE_PROJECT_ID }}

      - name: Refresh AWS credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Revoke Runner IP
        if: always()
        uses: ./.github/actions/revoke-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

  v2-11:
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.rancher_version, 'v2.11.'))
    name: ${{ inputs.rancher_version || github.event.inputs.rancher-version-2-11 }}
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout tfp-automation repository
        uses: actions/checkout@v4
        with:
          repository: rancher/tfp-automation
          path: tfp-automation

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS credentials from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            AWS_ACCESS_KEY, ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY, ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Whitelist Runner IP
        uses: ./.github/actions/whitelist-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-version-2-11) || 
              (github.event_name == 'schedule' && vars.RANCHER_VERSION_2_11_HEAD) 
            }}

      - name: Set Rancher chart version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_CHART_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_chart_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-chart-version-2-11) || 
              (github.event_name == 'schedule' && vars.RANCHER_CHART_VERSION_2_11_HEAD) 
            }}

      - name: Set Rancher repo
        uses: ./.github/actions/set-rancher-repo
        with:
          rancher-version: ${{ env.RANCHER_VERSION }}
          fallback-repo: ${{ secrets.RANCHER_REPO }}

      - name: Get Qase ID
        id: get-qase-id
        uses: ./.github/actions/get-qase-id
        with:
          triggered_tag: ${{ github.event.inputs.rancher_version }}
          qase_release_id: ${{ vars.HB_QASE_RELEASE_TEST_RUN_ID_2_11 }}
          qase_rc_id: ${{ vars.HB_QASE_RC_TEST_RUN_ID_2_11 }}
          qase_recurring_id: ${{ vars.HB_QASE_DEFAULT_TEST_RUN_ID_2_11 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
            cleanup: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.TFP_SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            awsCredentials:
              awsAccessKey: "$AWS_ACCESS_KEY"
              awsSecretKey: "$AWS_SECRET_KEY"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              certType: "${{ vars.CERT_TYPE }}"
              chartVersion: "${{ env.RANCHER_CHART_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ env.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_11 }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            standaloneLogging: "${{ vars.TERRAFORM_LOGGING }}"

          scalingInput:
            nodeProvider: "ec2"

          clusterConfig:
            cni: "${{ secrets.CNI }}"
            provider: "${{ vars.PROVIDER_AMAZON }}"
            nodeProvider: "ec2"

          awsCredentials:
            secretKey: "$AWS_SECRET_KEY"
            accessKey: "$AWS_ACCESS_KEY"
            defaultRegion: "${{ secrets.AWS_REGION }}"

          awsMachineConfigs:
            region: "${{ secrets.AWS_REGION }}"
            awsMachineConfig:
            - roles: ["etcd", "controlplane", "worker"]
              instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              sshUser: "${{ secrets.AWS_USER }}"
              vpcId: "${{ secrets.AWS_VPC_ID }}"
              volumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              zone: "${{ vars.AWS_ZONE_LETTER }}"
              retries: "5"
              rootSize: "${{ vars.AWS_ROOT_SIZE }}"
              securityGroup: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]

          awsEC2Configs:
            region: "${{ secrets.AWS_REGION }}"
            awsSecretAccessKey: "$AWS_SECRET_KEY"
            awsAccessKeyID: "$AWS_ACCESS_KEY"
            awsEC2Config:
              - instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.AWS_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs"
                awsIAMProfile: "${{ secrets.AWS_IAM_PROFILE}}"
                awsUser: "${{ secrets.AWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["etcd", "controlplane", "worker"]
              - instanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.WINDOWS_2022_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs-wins"
                awsUser: "${{ secrets.AWS_WINDOWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["windows"]
          sshPath: 
            sshPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/go-build.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Creating Rancher server
        run: go run /home/runner/work/tests/tests/validation/recurring/infrastructure/setuprancher/createRancherServer.go

      - name: Run Test Suites
        uses: ./.github/actions/run-hostbusters-test-suites

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          hb-qase-test-run-id: ${{ steps.get-qase-id.outputs.id }}
          qase-automation-token: ${{ secrets.QASE_AUTOMATION_TOKEN }}
          hb-qase-project-id: ${{ secrets.HB_QASE_PROJECT_ID }}

      - name: Refresh AWS credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Revoke Runner IP
        if: always()
        uses: ./.github/actions/revoke-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

  v2-10:
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.rancher_version, 'v2.10.'))
    name: ${{ inputs.rancher_version || github.event.inputs.rancher-version-2-10 }}
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout tfp-automation repository
        uses: actions/checkout@v4
        with:
          repository: rancher/tfp-automation
          path: tfp-automation

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS credentials from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            AWS_ACCESS_KEY, ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY, ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Whitelist Runner IP
        uses: ./.github/actions/whitelist-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-version-2-10) || 
              (github.event_name == 'schedule' && vars.RANCHER_VERSION_2_10_HEAD) 
            }}

      - name: Set Rancher chart version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_CHART_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_chart_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-chart-version-2-10) || 
              (github.event_name == 'schedule' && vars.RANCHER_CHART_VERSION_2_10_HEAD) 
            }}

      - name: Set Rancher repo
        uses: ./.github/actions/set-rancher-repo
        with:
          rancher-version: ${{ env.RANCHER_VERSION }}
          fallback-repo: ${{ secrets.RANCHER_REPO }}

      - name: Get Qase ID
        id: get-qase-id
        uses: ./.github/actions/get-qase-id
        with:
          triggered_tag: ${{ github.event.inputs.rancher_version }}
          qase_release_id: ${{ vars.HB_QASE_RELEASE_TEST_RUN_ID_2_10 }}
          qase_rc_id: ${{ vars.HB_QASE_RC_TEST_RUN_ID_2_10 }}
          qase_recurring_id: ${{ vars.HB_QASE_DEFAULT_TEST_RUN_ID_2_10 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
            cleanup: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.TFP_SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            awsCredentials:
              awsAccessKey: "$AWS_ACCESS_KEY"
              awsSecretKey: "$AWS_SECRET_KEY"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              certType: "${{ vars.CERT_TYPE }}"
              chartVersion: "${{ env.RANCHER_CHART_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ env.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_10 }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            standaloneLogging: "${{ vars.TERRAFORM_LOGGING }}"

          scalingInput:
            nodeProvider: "ec2"

          clusterConfig:
            cni: "${{ secrets.CNI }}"
            provider: "${{ vars.PROVIDER_AMAZON }}"
            nodeProvider: "ec2"

          awsCredentials:
            secretKey: "$AWS_SECRET_KEY"
            accessKey: "$AWS_ACCESS_KEY"
            defaultRegion: "${{ secrets.AWS_REGION }}"

          awsMachineConfigs:
            region: "${{ secrets.AWS_REGION }}"
            awsMachineConfig:
            - roles: ["etcd", "controlplane", "worker"]
              instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              sshUser: "${{ secrets.AWS_USER }}"
              vpcId: "${{ secrets.AWS_VPC_ID }}"
              volumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              zone: "${{ vars.AWS_ZONE_LETTER }}"
              retries: "5"
              rootSize: "${{ vars.AWS_ROOT_SIZE }}"
              securityGroup: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]

          awsEC2Configs:
            region: "${{ secrets.AWS_REGION }}"
            awsSecretAccessKey: "$AWS_SECRET_KEY"
            awsAccessKeyID: "$AWS_ACCESS_KEY"
            awsEC2Config:
              - instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.AWS_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs"
                awsIAMProfile: "${{ secrets.AWS_IAM_PROFILE}}"
                awsUser: "${{ secrets.AWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["etcd", "controlplane", "worker"]
              - instanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.WINDOWS_2022_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs-wins"
                awsUser: "${{ secrets.AWS_WINDOWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["windows"]
          sshPath: 
            sshPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/go-build.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Creating Rancher server
        run: go run /home/runner/work/tests/tests/validation/recurring/infrastructure/setuprancher/createRancherServer.go

      - name: Run Test Suites
        uses: ./.github/actions/run-hostbusters-test-suites

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          hb-qase-test-run-id: ${{ steps.get-qase-id.outputs.id }}
          qase-automation-token: ${{ secrets.QASE_AUTOMATION_TOKEN }}
          hb-qase-project-id: ${{ secrets.HB_QASE_PROJECT_ID }}

      - name: Refresh AWS credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Revoke Runner IP
        if: always()
        uses: ./.github/actions/revoke-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

  v2-9:
    if: |
      (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.rancher_version, 'v2.9.'))
    name: ${{ inputs.rancher_version || github.event.inputs.rancher-version-2-9 }}
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout tfp-automation repository
        uses: actions/checkout@v4
        with:
          repository: rancher/tfp-automation
          path: tfp-automation

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS credentials from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            AWS_ACCESS_KEY, ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY, ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Whitelist Runner IP
        uses: ./.github/actions/whitelist-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-version-2-9) || 
              (github.event_name == 'schedule' && vars.RANCHER_VERSION_2_9_HEAD) 
            }}

      - name: Set Rancher chart version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_CHART_VERSION
          value: |
            ${{ 
              github.event.inputs.rancher_chart_version || 
              (github.event_name == 'workflow_dispatch' && github.event.inputs.rancher-chart-version-2-9) || 
              (github.event_name == 'schedule' && vars.RANCHER_CHART_VERSION_2_9_HEAD) 
            }}

      - name: Set Rancher repo
        uses: ./.github/actions/set-rancher-repo
        with:
          rancher-version: ${{ env.RANCHER_VERSION }}
          fallback-repo: ${{ secrets.RANCHER_REPO }}

      - name: Get Qase ID
        id: get-qase-id
        uses: ./.github/actions/get-qase-id
        with:
          triggered_tag: ${{ github.event.inputs.rancher_version }}
          qase_release_id: ${{ vars.HB_QASE_RELEASE_TEST_RUN_ID_2_9 }}
          qase_rc_id: ${{ vars.HB_QASE_RC_TEST_RUN_ID_2_9 }}
          qase_recurring_id: ${{ vars.HB_QASE_DEFAULT_TEST_RUN_ID_2_9 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
            cleanup: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.TFP_SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            awsCredentials:
              awsAccessKey: "$AWS_ACCESS_KEY"
              awsSecretKey: "$AWS_SECRET_KEY"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              certType: "${{ vars.CERT_TYPE }}"
              chartVersion: "${{ env.RANCHER_CHART_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ env.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_9 }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            standaloneLogging: "${{ vars.TERRAFORM_LOGGING }}"

          scalingInput:
            nodeProvider: "ec2"

          clusterConfig:
            cni: "${{ secrets.CNI }}"
            provider: "${{ vars.PROVIDER_AMAZON }}"
            nodeProvider: "ec2"

          awsCredentials:
            secretKey: "$AWS_SECRET_KEY"
            accessKey: "$AWS_ACCESS_KEY"
            defaultRegion: "${{ secrets.AWS_REGION }}"

          awsMachineConfigs:
            region: "${{ secrets.AWS_REGION }}"
            awsMachineConfig:
            - roles: ["etcd", "controlplane", "worker"]
              instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              sshUser: "${{ secrets.AWS_USER }}"
              vpcId: "${{ secrets.AWS_VPC_ID }}"
              volumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              zone: "${{ vars.AWS_ZONE_LETTER }}"
              retries: "5"
              rootSize: "${{ vars.AWS_ROOT_SIZE }}"
              securityGroup: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]

          awsEC2Configs:
            region: "${{ secrets.AWS_REGION }}"
            awsSecretAccessKey: "$AWS_SECRET_KEY"
            awsAccessKeyID: "$AWS_ACCESS_KEY"
            awsEC2Config:
              - instanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.AWS_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs"
                awsIAMProfile: "${{ secrets.AWS_IAM_PROFILE}}"
                awsUser: "${{ secrets.AWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["etcd", "controlplane", "worker"]
              - instanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
                awsRegionAZ: "${{ secrets.AWS_REGION }}${{ vars.AWS_ZONE_LETTER }}"
                awsAMI: "${{ secrets.WINDOWS_2022_AMI }}"
                awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
                awsSSHKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}.pem"
                awsCICDInstanceTag: "hb-recurring-runs-wins"
                awsUser: "${{ secrets.AWS_WINDOWS_USER }}"
                volumeSize: ${{ vars.AWS_ROOT_SIZE }}
                roles: ["windows"]
          sshPath: 
            sshPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/go-build.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Creating Rancher server
        run: go run /home/runner/work/tests/tests/validation/recurring/infrastructure/setuprancher/createRancherServer.go

      - name: Run Test Suites
        uses: ./.github/actions/run-hostbusters-test-suites

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          hb-qase-test-run-id: ${{ steps.get-qase-id.outputs.id }}
          qase-automation-token: ${{ secrets.QASE_AUTOMATION_TOKEN }}
          hb-qase-project-id: ${{ secrets.HB_QASE_PROJECT_ID }}

      - name: Refresh AWS credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Revoke Runner IP
        if: always()
        uses: ./.github/actions/revoke-runner-ip
        with:
          prefix-list-id: ${{ secrets.AWS_MANAGED_PREFIX_LIST_ID }}
          region: "${{ secrets.AWS_REGION }}"